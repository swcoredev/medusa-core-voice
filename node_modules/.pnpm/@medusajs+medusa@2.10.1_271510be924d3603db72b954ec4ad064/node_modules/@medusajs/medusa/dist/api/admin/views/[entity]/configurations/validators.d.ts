import { z } from "zod";
export declare const AdminGetViewConfigurationParams: z.ZodObject<{
    fields: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    fields?: string | undefined;
}, {
    fields?: string | undefined;
}>;
export type AdminGetActiveViewConfigurationParamsType = z.infer<typeof AdminGetActiveViewConfigurationParams>;
export declare const AdminGetActiveViewConfigurationParams: z.ZodObject<{
    fields: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    fields?: string | undefined;
}, {
    fields?: string | undefined;
}>;
export declare const AdminGetViewConfigurationsParamsFields: z.ZodObject<{
    id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    entity: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    user_id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
    is_system_default: z.ZodOptional<z.ZodBoolean>;
    created_at: z.ZodOptional<z.ZodUnion<[any, z.ZodObject<{
        $eq: any;
        $ne: any;
        $in: any;
        $nin: any;
        $like: any;
        $ilike: any;
        $re: any;
        $contains: any;
        $gt: any;
        $gte: any;
        $lt: any;
        $lte: any;
    }, "strip", z.ZodTypeAny, {
        $eq?: any;
        $ne?: any;
        $in?: any;
        $nin?: any;
        $like?: any;
        $ilike?: any;
        $re?: any;
        $contains?: any;
        $gt?: any;
        $gte?: any;
        $lt?: any;
        $lte?: any;
    }, {
        $eq?: any;
        $ne?: any;
        $in?: any;
        $nin?: any;
        $like?: any;
        $ilike?: any;
        $re?: any;
        $contains?: any;
        $gt?: any;
        $gte?: any;
        $lt?: any;
        $lte?: any;
    }>]>>;
    updated_at: z.ZodOptional<z.ZodUnion<[any, z.ZodObject<{
        $eq: any;
        $ne: any;
        $in: any;
        $nin: any;
        $like: any;
        $ilike: any;
        $re: any;
        $contains: any;
        $gt: any;
        $gte: any;
        $lt: any;
        $lte: any;
    }, "strip", z.ZodTypeAny, {
        $eq?: any;
        $ne?: any;
        $in?: any;
        $nin?: any;
        $like?: any;
        $ilike?: any;
        $re?: any;
        $contains?: any;
        $gt?: any;
        $gte?: any;
        $lt?: any;
        $lte?: any;
    }, {
        $eq?: any;
        $ne?: any;
        $in?: any;
        $nin?: any;
        $like?: any;
        $ilike?: any;
        $re?: any;
        $contains?: any;
        $gt?: any;
        $gte?: any;
        $lt?: any;
        $lte?: any;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    id?: string | string[] | undefined;
    entity?: string | string[] | undefined;
    name?: string | string[] | undefined;
    created_at?: any;
    updated_at?: any;
    user_id?: string | string[] | null | undefined;
    is_system_default?: boolean | undefined;
}, {
    id?: string | string[] | undefined;
    entity?: string | string[] | undefined;
    name?: string | string[] | undefined;
    created_at?: any;
    updated_at?: any;
    user_id?: string | string[] | null | undefined;
    is_system_default?: boolean | undefined;
}>;
export type AdminGetViewConfigurationsParamsType = z.infer<typeof AdminGetViewConfigurationsParams>;
export declare const AdminGetViewConfigurationsParams: z.ZodObject<{} & {
    [x: string]: any;
    $and: z.ZodOptional<z.ZodLazy<z.ZodArray<z.ZodObject<{
        id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        entity: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        user_id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
        is_system_default: z.ZodOptional<z.ZodBoolean>;
        created_at: z.ZodOptional<z.ZodUnion<[any, z.ZodObject<{
            $eq: any;
            $ne: any;
            $in: any;
            $nin: any;
            $like: any;
            $ilike: any;
            $re: any;
            $contains: any;
            $gt: any;
            $gte: any;
            $lt: any;
            $lte: any;
        }, "strip", z.ZodTypeAny, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }>]>>;
        updated_at: z.ZodOptional<z.ZodUnion<[any, z.ZodObject<{
            $eq: any;
            $ne: any;
            $in: any;
            $nin: any;
            $like: any;
            $ilike: any;
            $re: any;
            $contains: any;
            $gt: any;
            $gte: any;
            $lt: any;
            $lte: any;
        }, "strip", z.ZodTypeAny, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }>]>>;
    }, "strip", z.ZodTypeAny, {
        id?: string | string[] | undefined;
        entity?: string | string[] | undefined;
        name?: string | string[] | undefined;
        created_at?: any;
        updated_at?: any;
        user_id?: string | string[] | null | undefined;
        is_system_default?: boolean | undefined;
    }, {
        id?: string | string[] | undefined;
        entity?: string | string[] | undefined;
        name?: string | string[] | undefined;
        created_at?: any;
        updated_at?: any;
        user_id?: string | string[] | null | undefined;
        is_system_default?: boolean | undefined;
    }>, "many">>>;
    $or: z.ZodOptional<z.ZodLazy<z.ZodArray<z.ZodObject<{
        id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        entity: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        user_id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
        is_system_default: z.ZodOptional<z.ZodBoolean>;
        created_at: z.ZodOptional<z.ZodUnion<[any, z.ZodObject<{
            $eq: any;
            $ne: any;
            $in: any;
            $nin: any;
            $like: any;
            $ilike: any;
            $re: any;
            $contains: any;
            $gt: any;
            $gte: any;
            $lt: any;
            $lte: any;
        }, "strip", z.ZodTypeAny, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }>]>>;
        updated_at: z.ZodOptional<z.ZodUnion<[any, z.ZodObject<{
            $eq: any;
            $ne: any;
            $in: any;
            $nin: any;
            $like: any;
            $ilike: any;
            $re: any;
            $contains: any;
            $gt: any;
            $gte: any;
            $lt: any;
            $lte: any;
        }, "strip", z.ZodTypeAny, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }>]>>;
    }, "strip", z.ZodTypeAny, {
        id?: string | string[] | undefined;
        entity?: string | string[] | undefined;
        name?: string | string[] | undefined;
        created_at?: any;
        updated_at?: any;
        user_id?: string | string[] | null | undefined;
        is_system_default?: boolean | undefined;
    }, {
        id?: string | string[] | undefined;
        entity?: string | string[] | undefined;
        name?: string | string[] | undefined;
        created_at?: any;
        updated_at?: any;
        user_id?: string | string[] | null | undefined;
        is_system_default?: boolean | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    [x: string]: any;
    $and?: unknown;
    $or?: unknown;
}, {
    [x: string]: any;
    $and?: unknown;
    $or?: unknown;
}>;
export type AdminCreateViewConfigurationType = z.infer<typeof AdminCreateViewConfiguration>;
export declare const AdminCreateViewConfiguration: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    is_system_default: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    set_active: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    configuration: z.ZodObject<{
        visible_columns: z.ZodArray<z.ZodString, "many">;
        column_order: z.ZodArray<z.ZodString, "many">;
        column_widths: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodNumber>>;
        filters: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        sorting: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            id: z.ZodString;
            desc: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            id: string;
            desc: boolean;
        }, {
            id: string;
            desc: boolean;
        }>>>;
        search: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        visible_columns: string[];
        column_order: string[];
        search?: string | undefined;
        filters?: Record<string, any> | undefined;
        column_widths?: Record<string, number> | undefined;
        sorting?: {
            id: string;
            desc: boolean;
        } | null | undefined;
    }, {
        visible_columns: string[];
        column_order: string[];
        search?: string | undefined;
        filters?: Record<string, any> | undefined;
        column_widths?: Record<string, number> | undefined;
        sorting?: {
            id: string;
            desc: boolean;
        } | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    is_system_default: boolean;
    configuration: {
        visible_columns: string[];
        column_order: string[];
        search?: string | undefined;
        filters?: Record<string, any> | undefined;
        column_widths?: Record<string, number> | undefined;
        sorting?: {
            id: string;
            desc: boolean;
        } | null | undefined;
    };
    set_active: boolean;
    name?: string | undefined;
}, {
    configuration: {
        visible_columns: string[];
        column_order: string[];
        search?: string | undefined;
        filters?: Record<string, any> | undefined;
        column_widths?: Record<string, number> | undefined;
        sorting?: {
            id: string;
            desc: boolean;
        } | null | undefined;
    };
    name?: string | undefined;
    is_system_default?: boolean | undefined;
    set_active?: boolean | undefined;
}>;
export type AdminUpdateViewConfigurationType = z.infer<typeof AdminUpdateViewConfiguration>;
export declare const AdminUpdateViewConfiguration: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    is_system_default: z.ZodOptional<z.ZodBoolean>;
    set_active: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    configuration: z.ZodOptional<z.ZodObject<{
        visible_columns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        column_order: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        column_widths: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodNumber>>;
        filters: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        sorting: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            id: z.ZodString;
            desc: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            id: string;
            desc: boolean;
        }, {
            id: string;
            desc: boolean;
        }>>>;
        search: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        search?: string | undefined;
        filters?: Record<string, any> | undefined;
        visible_columns?: string[] | undefined;
        column_order?: string[] | undefined;
        column_widths?: Record<string, number> | undefined;
        sorting?: {
            id: string;
            desc: boolean;
        } | null | undefined;
    }, {
        search?: string | undefined;
        filters?: Record<string, any> | undefined;
        visible_columns?: string[] | undefined;
        column_order?: string[] | undefined;
        column_widths?: Record<string, number> | undefined;
        sorting?: {
            id: string;
            desc: boolean;
        } | null | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    set_active: boolean;
    name?: string | undefined;
    is_system_default?: boolean | undefined;
    configuration?: {
        search?: string | undefined;
        filters?: Record<string, any> | undefined;
        visible_columns?: string[] | undefined;
        column_order?: string[] | undefined;
        column_widths?: Record<string, number> | undefined;
        sorting?: {
            id: string;
            desc: boolean;
        } | null | undefined;
    } | undefined;
}, {
    name?: string | undefined;
    is_system_default?: boolean | undefined;
    configuration?: {
        search?: string | undefined;
        filters?: Record<string, any> | undefined;
        visible_columns?: string[] | undefined;
        column_order?: string[] | undefined;
        column_widths?: Record<string, number> | undefined;
        sorting?: {
            id: string;
            desc: boolean;
        } | null | undefined;
    } | undefined;
    set_active?: boolean | undefined;
}>;
export type AdminSetActiveViewConfigurationType = z.infer<typeof AdminSetActiveViewConfiguration>;
export declare const AdminSetActiveViewConfiguration: z.ZodObject<{
    view_configuration_id: z.ZodUnion<[z.ZodString, z.ZodNull]>;
}, "strip", z.ZodTypeAny, {
    view_configuration_id: string | null;
}, {
    view_configuration_id: string | null;
}>;
//# sourceMappingURL=validators.d.ts.map