"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DELETE = exports.POST = exports.GET = void 0;
const utils_1 = require("@medusajs/framework/utils");
const core_flows_1 = require("@medusajs/core-flows");
/**
 * @ignore
 *
 * @privateRemarks
 * Remove the `ignore` tag once the feature is ready. Otherwise,
 * it will be generated in the documentation.
 */
const GET = async (req, res) => {
    const settingsService = req.scope.resolve(utils_1.Modules.SETTINGS);
    const viewConfiguration = await settingsService.retrieveViewConfiguration(req.params.id, req.queryConfig);
    if (viewConfiguration.user_id &&
        viewConfiguration.user_id !== req.auth_context.actor_id &&
        !req.auth_context.app_metadata?.admin) {
        throw new utils_1.MedusaError(utils_1.MedusaError.Types.NOT_ALLOWED, "You don't have access to this view configuration");
    }
    res.json({ view_configuration: viewConfiguration });
};
exports.GET = GET;
/**
 * @ignore
 *
 * @privateRemarks
 * Remove the `ignore` tag once the feature is ready. Otherwise,
 * it will be generated in the documentation.
 */
const POST = async (req, res) => {
    const settingsService = req.scope.resolve(utils_1.Modules.SETTINGS);
    // Single retrieval for permission check
    const existing = await settingsService.retrieveViewConfiguration(req.params.id, { select: ["id", "user_id", "is_system_default"] });
    if (existing.user_id && existing.user_id !== req.auth_context.actor_id) {
        throw new utils_1.MedusaError(utils_1.MedusaError.Types.NOT_ALLOWED, "You can only update your own view configurations");
    }
    const input = {
        id: req.params.id,
        ...req.validatedBody,
    };
    const { result } = await (0, core_flows_1.updateViewConfigurationWorkflow)(req.scope).run({
        input,
    });
    res.json({ view_configuration: result });
};
exports.POST = POST;
/**
 * @ignore
 *
 * @privateRemarks
 * Remove the `ignore` tag once the feature is ready. Otherwise,
 * it will be generated in the documentation.
 */
const DELETE = async (req, res) => {
    const settingsService = req.scope.resolve(utils_1.Modules.SETTINGS);
    // Retrieve existing to check permissions
    const existing = await settingsService.retrieveViewConfiguration(req.params.id, { select: ["id", "user_id", "is_system_default", "entity", "name"] });
    if (existing.user_id && existing.user_id !== req.auth_context.actor_id) {
        throw new utils_1.MedusaError(utils_1.MedusaError.Types.NOT_ALLOWED, "You can only delete your own view configurations");
    }
    await settingsService.deleteViewConfigurations(req.params.id);
    res.status(200).json({
        id: req.params.id,
        object: "view_configuration",
        deleted: true,
    });
};
exports.DELETE = DELETE;
//# sourceMappingURL=route.js.map