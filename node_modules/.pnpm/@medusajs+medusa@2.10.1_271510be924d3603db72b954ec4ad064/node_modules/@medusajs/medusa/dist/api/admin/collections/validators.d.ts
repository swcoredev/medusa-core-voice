import { z } from "zod";
export declare const AdminGetCollectionParams: z.ZodObject<{
    fields: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    fields?: string | undefined;
}, {
    fields?: string | undefined;
}>;
export declare const AdminGetCollectionsParamsFields: z.ZodObject<{
    q: z.ZodOptional<z.ZodString>;
    title: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    handle: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    created_at: z.ZodOptional<z.ZodUnion<[any, z.ZodObject<{
        $eq: any;
        $ne: any;
        $in: any;
        $nin: any;
        $like: any;
        $ilike: any;
        $re: any;
        $contains: any;
        $gt: any;
        $gte: any;
        $lt: any;
        $lte: any;
    }, "strip", z.ZodTypeAny, {
        $eq?: any;
        $ne?: any;
        $in?: any;
        $nin?: any;
        $like?: any;
        $ilike?: any;
        $re?: any;
        $contains?: any;
        $gt?: any;
        $gte?: any;
        $lt?: any;
        $lte?: any;
    }, {
        $eq?: any;
        $ne?: any;
        $in?: any;
        $nin?: any;
        $like?: any;
        $ilike?: any;
        $re?: any;
        $contains?: any;
        $gt?: any;
        $gte?: any;
        $lt?: any;
        $lte?: any;
    }>]>>;
    updated_at: z.ZodOptional<z.ZodUnion<[any, z.ZodObject<{
        $eq: any;
        $ne: any;
        $in: any;
        $nin: any;
        $like: any;
        $ilike: any;
        $re: any;
        $contains: any;
        $gt: any;
        $gte: any;
        $lt: any;
        $lte: any;
    }, "strip", z.ZodTypeAny, {
        $eq?: any;
        $ne?: any;
        $in?: any;
        $nin?: any;
        $like?: any;
        $ilike?: any;
        $re?: any;
        $contains?: any;
        $gt?: any;
        $gte?: any;
        $lt?: any;
        $lte?: any;
    }, {
        $eq?: any;
        $ne?: any;
        $in?: any;
        $nin?: any;
        $like?: any;
        $ilike?: any;
        $re?: any;
        $contains?: any;
        $gt?: any;
        $gte?: any;
        $lt?: any;
        $lte?: any;
    }>]>>;
    deleted_at: z.ZodOptional<z.ZodUnion<[any, z.ZodObject<{
        $eq: any;
        $ne: any;
        $in: any;
        $nin: any;
        $like: any;
        $ilike: any;
        $re: any;
        $contains: any;
        $gt: any;
        $gte: any;
        $lt: any;
        $lte: any;
    }, "strip", z.ZodTypeAny, {
        $eq?: any;
        $ne?: any;
        $in?: any;
        $nin?: any;
        $like?: any;
        $ilike?: any;
        $re?: any;
        $contains?: any;
        $gt?: any;
        $gte?: any;
        $lt?: any;
        $lte?: any;
    }, {
        $eq?: any;
        $ne?: any;
        $in?: any;
        $nin?: any;
        $like?: any;
        $ilike?: any;
        $re?: any;
        $contains?: any;
        $gt?: any;
        $gte?: any;
        $lt?: any;
        $lte?: any;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    created_at?: any;
    updated_at?: any;
    deleted_at?: any;
    title?: string | string[] | undefined;
    q?: string | undefined;
    handle?: string | string[] | undefined;
}, {
    created_at?: any;
    updated_at?: any;
    deleted_at?: any;
    title?: string | string[] | undefined;
    q?: string | undefined;
    handle?: string | string[] | undefined;
}>;
export type AdminGetCollectionsParamsType = z.infer<typeof AdminGetCollectionsParams>;
export declare const AdminGetCollectionsParams: z.ZodObject<{} & {
    [x: string]: any;
    $and: z.ZodOptional<z.ZodLazy<z.ZodArray<z.ZodObject<{
        q: z.ZodOptional<z.ZodString>;
        title: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        handle: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        created_at: z.ZodOptional<z.ZodUnion<[any, z.ZodObject<{
            $eq: any;
            $ne: any;
            $in: any;
            $nin: any;
            $like: any;
            $ilike: any;
            $re: any;
            $contains: any;
            $gt: any;
            $gte: any;
            $lt: any;
            $lte: any;
        }, "strip", z.ZodTypeAny, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }>]>>;
        updated_at: z.ZodOptional<z.ZodUnion<[any, z.ZodObject<{
            $eq: any;
            $ne: any;
            $in: any;
            $nin: any;
            $like: any;
            $ilike: any;
            $re: any;
            $contains: any;
            $gt: any;
            $gte: any;
            $lt: any;
            $lte: any;
        }, "strip", z.ZodTypeAny, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }>]>>;
        deleted_at: z.ZodOptional<z.ZodUnion<[any, z.ZodObject<{
            $eq: any;
            $ne: any;
            $in: any;
            $nin: any;
            $like: any;
            $ilike: any;
            $re: any;
            $contains: any;
            $gt: any;
            $gte: any;
            $lt: any;
            $lte: any;
        }, "strip", z.ZodTypeAny, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }>]>>;
    }, "strip", z.ZodTypeAny, {
        created_at?: any;
        updated_at?: any;
        deleted_at?: any;
        title?: string | string[] | undefined;
        q?: string | undefined;
        handle?: string | string[] | undefined;
    }, {
        created_at?: any;
        updated_at?: any;
        deleted_at?: any;
        title?: string | string[] | undefined;
        q?: string | undefined;
        handle?: string | string[] | undefined;
    }>, "many">>>;
    $or: z.ZodOptional<z.ZodLazy<z.ZodArray<z.ZodObject<{
        q: z.ZodOptional<z.ZodString>;
        title: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        handle: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        created_at: z.ZodOptional<z.ZodUnion<[any, z.ZodObject<{
            $eq: any;
            $ne: any;
            $in: any;
            $nin: any;
            $like: any;
            $ilike: any;
            $re: any;
            $contains: any;
            $gt: any;
            $gte: any;
            $lt: any;
            $lte: any;
        }, "strip", z.ZodTypeAny, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }>]>>;
        updated_at: z.ZodOptional<z.ZodUnion<[any, z.ZodObject<{
            $eq: any;
            $ne: any;
            $in: any;
            $nin: any;
            $like: any;
            $ilike: any;
            $re: any;
            $contains: any;
            $gt: any;
            $gte: any;
            $lt: any;
            $lte: any;
        }, "strip", z.ZodTypeAny, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }>]>>;
        deleted_at: z.ZodOptional<z.ZodUnion<[any, z.ZodObject<{
            $eq: any;
            $ne: any;
            $in: any;
            $nin: any;
            $like: any;
            $ilike: any;
            $re: any;
            $contains: any;
            $gt: any;
            $gte: any;
            $lt: any;
            $lte: any;
        }, "strip", z.ZodTypeAny, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }, {
            $eq?: any;
            $ne?: any;
            $in?: any;
            $nin?: any;
            $like?: any;
            $ilike?: any;
            $re?: any;
            $contains?: any;
            $gt?: any;
            $gte?: any;
            $lt?: any;
            $lte?: any;
        }>]>>;
    }, "strip", z.ZodTypeAny, {
        created_at?: any;
        updated_at?: any;
        deleted_at?: any;
        title?: string | string[] | undefined;
        q?: string | undefined;
        handle?: string | string[] | undefined;
    }, {
        created_at?: any;
        updated_at?: any;
        deleted_at?: any;
        title?: string | string[] | undefined;
        q?: string | undefined;
        handle?: string | string[] | undefined;
    }>, "many">>>;
}, "strip", z.ZodTypeAny, {
    [x: string]: any;
    $and?: unknown;
    $or?: unknown;
}, {
    [x: string]: any;
    $and?: unknown;
    $or?: unknown;
}>;
export type AdminCreateCollectionType = z.infer<typeof CreateCollection>;
export declare const CreateCollection: z.ZodObject<{
    title: z.ZodString;
    handle: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
}, "strip", z.ZodTypeAny, {
    title: string;
    metadata?: Record<string, unknown> | null | undefined;
    handle?: string | undefined;
}, {
    title: string;
    metadata?: Record<string, unknown> | null | undefined;
    handle?: string | undefined;
}>;
export declare const AdminCreateCollection: (additionalDataValidator?: z.ZodOptional<z.ZodNullable<z.ZodObject<any, any>>>) => z.ZodObject<any, any, z.ZodTypeAny, {
    [x: string]: any;
}, {
    [x: string]: any;
}> | z.ZodEffects<any, any, any>;
export type AdminUpdateCollectionType = z.infer<typeof UpdateCollection>;
export declare const UpdateCollection: z.ZodObject<{
    title: z.ZodOptional<z.ZodString>;
    handle: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
}, "strip", z.ZodTypeAny, {
    metadata?: Record<string, unknown> | null | undefined;
    title?: string | undefined;
    handle?: string | undefined;
}, {
    metadata?: Record<string, unknown> | null | undefined;
    title?: string | undefined;
    handle?: string | undefined;
}>;
export declare const AdminUpdateCollection: (additionalDataValidator?: z.ZodOptional<z.ZodNullable<z.ZodObject<any, any>>>) => z.ZodObject<any, any, z.ZodTypeAny, {
    [x: string]: any;
}, {
    [x: string]: any;
}> | z.ZodEffects<any, any, any>;
//# sourceMappingURL=validators.d.ts.map