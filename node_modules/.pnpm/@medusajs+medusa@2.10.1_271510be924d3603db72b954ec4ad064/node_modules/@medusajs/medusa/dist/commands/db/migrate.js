"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrate = migrate;
const framework_1 = require("@medusajs/framework");
const links_1 = require("@medusajs/framework/links");
const utils_1 = require("@medusajs/framework/utils");
const child_process_1 = require("child_process");
const path_1 = __importStar(require("path"));
const loaders_1 = require("../../loaders");
const utils_2 = require("../utils");
const sync_links_1 = require("./sync-links");
const TERMINAL_SIZE = process.stdout.columns;
const cliPath = path_1.default.resolve(framework_1.MEDUSA_CLI_PATH, "..", "..", "cli.js");
/**
 * A low-level utility to migrate the database. This util should
 * never exit the process implicitly.
 */
async function migrate({ directory, skipLinks, skipScripts, executeAllLinks, executeSafeLinks, logger, container, }) {
    /**
     * Setup
     */
    await (0, utils_2.ensureDbExists)(container);
    const medusaAppLoader = new framework_1.MedusaAppLoader();
    const configModule = container.resolve(utils_1.ContainerRegistrationKeys.CONFIG_MODULE);
    const plugins = await (0, utils_1.getResolvedPlugins)(directory, configModule, true);
    (0, utils_1.mergePluginModules)(configModule, plugins);
    const linksSourcePaths = plugins.map((plugin) => (0, path_1.join)(plugin.resolve, "links"));
    await new links_1.LinkLoader(linksSourcePaths, logger).load();
    /**
     * Run migrations
     */
    logger.info("Running migrations...");
    await medusaAppLoader.runModulesMigrations({
        action: "run",
    });
    logger.log(new Array(TERMINAL_SIZE).join("-"));
    logger.info("Migrations completed");
    /**
     * Sync links
     */
    if (!skipLinks) {
        logger.log(new Array(TERMINAL_SIZE).join("-"));
        await (0, sync_links_1.syncLinks)(medusaAppLoader, {
            executeAll: executeAllLinks,
            executeSafe: executeSafeLinks,
            directory,
            container,
        });
    }
    if (!skipScripts) {
        /**
         * Run migration scripts
         */
        logger.log(new Array(TERMINAL_SIZE).join("-"));
        const childProcess = (0, child_process_1.fork)(cliPath, ["db:migrate:scripts"], {
            cwd: directory,
            env: process.env,
        });
        await new Promise((resolve, reject) => {
            childProcess.on("error", (error) => {
                reject(error);
            });
            childProcess.on("close", () => {
                resolve();
            });
        });
    }
    return true;
}
const main = async function ({ directory, skipLinks, skipScripts, executeAllLinks, executeSafeLinks, }) {
    const container = await (0, loaders_1.initializeContainer)(directory);
    const logger = container.resolve(utils_1.ContainerRegistrationKeys.LOGGER);
    try {
        const migrated = await migrate({
            directory,
            skipLinks,
            skipScripts,
            executeAllLinks,
            executeSafeLinks,
            logger,
            container,
        });
        process.exit(migrated ? 0 : 1);
    }
    catch (error) {
        logger.error(error);
        process.exit(1);
    }
};
exports.default = main;
//# sourceMappingURL=migrate.js.map