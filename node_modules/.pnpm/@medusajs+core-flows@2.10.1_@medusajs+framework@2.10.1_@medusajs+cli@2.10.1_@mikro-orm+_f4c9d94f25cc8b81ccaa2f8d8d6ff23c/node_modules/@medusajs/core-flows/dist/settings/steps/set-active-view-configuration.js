"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setActiveViewConfigurationStep = exports.setActiveViewConfigurationStepId = void 0;
const utils_1 = require("@medusajs/framework/utils");
const workflows_sdk_1 = require("@medusajs/framework/workflows-sdk");
exports.setActiveViewConfigurationStepId = "set-active-view-configuration";
/**
 * @ignore
 *
 * @privateRemarks
 * Remove the `ignore` tag once the feature is ready. Otherwise,
 * it will be generated in the documentation.
 */
exports.setActiveViewConfigurationStep = (0, workflows_sdk_1.createStep)(exports.setActiveViewConfigurationStepId, async (input, { container }) => {
    const service = container.resolve(utils_1.Modules.SETTINGS);
    // Get the currently active view configuration for rollback
    const currentActiveView = await service.getActiveViewConfiguration(input.entity, input.user_id);
    // Set the new view as active
    await service.setActiveViewConfiguration(input.entity, input.user_id, input.id);
    return new workflows_sdk_1.StepResponse(input.id, {
        entity: input.entity,
        user_id: input.user_id,
        previousActiveViewId: currentActiveView?.id || null,
    });
}, async (compensateInput, { container }) => {
    if (!compensateInput) {
        return;
    }
    const service = container.resolve(utils_1.Modules.SETTINGS);
    if (compensateInput.previousActiveViewId) {
        // Restore the previous active view
        await service.setActiveViewConfiguration(compensateInput.entity, compensateInput.user_id, compensateInput.previousActiveViewId);
    }
    else {
        // If there was no previous active view, clear the active view
        await service.clearActiveViewConfiguration(compensateInput.entity, compensateInput.user_id);
    }
});
//# sourceMappingURL=set-active-view-configuration.js.map