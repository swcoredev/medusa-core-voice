{"version":3,"file":"tooltip.js","sourceRoot":"","sources":["../../../../src/components/tooltip/tooltip.tsx"],"names":[],"mappings":";AAAA,YAAY,CAAA;;;;AAEZ,uCAAkD;AAClD,qDAA8B;AAE9B,qCAAiC;AAcjC;;;;GAIG;AACH,MAAM,OAAO,GAAG,CAAC;AACf;;;;GAIG;AACH,QAAQ;AACR;;GAEG;AACH,OAAO;AACP;;;;GAIG;AACH,IAAI;AACJ;;;;GAIG;AACH,WAAW;AACX;;;;GAIG;AACH,YAAY;AACZ;;;;GAIG;AACH,aAAa;AACb;;GAEG;AACH,QAAQ,GAAG,GAAG,EACd,SAAS;AACT;;;;GAIG;AACH,IAAI;AACJ;;;;GAIG;AACH,UAAU,GAAG,CAAC;AACd;;GAEG;AACH,OAAO,EACP,GAAG,KAAK,EACK,EAAE,EAAE;IACjB,OAAO,CACH,oBAAC,kBAAY,CAAC,IAAI,IAChB,IAAI,EAAE,IAAI,EACV,WAAW,EAAE,WAAW,EACxB,YAAY,EAAE,YAAY,EAC1B,aAAa,EAAE,aAAa;QAE5B,oBAAC,kBAAY,CAAC,OAAO,IAAC,OAAO,EAAE,OAAO,EAAE,OAAO,UAC5C,QAAQ,CACY;QACvB,oBAAC,kBAAY,CAAC,MAAM;YAClB,oBAAC,kBAAY,CAAC,OAAO,IACnB,IAAI,EAAE,IAAI,EACV,UAAU,EAAE,UAAU,EACtB,KAAK,EAAC,QAAQ,EACd,SAAS,EAAE,IAAA,SAAG,EACZ,oGAAoG,EACpG,4RAA4R,EAC5R,SAAS,CACV,KACG,KAAK,EACT,KAAK,EAAE,EAAE,GAAG,KAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,IAElC,OAAO,CACa,CACH,CACJ,CACvB,CAAA;AACH,CAAC,CAAA;AAaQ,0BAAO;AAThB,MAAM,eAAe,GAAG,CAAC,EAAE,QAAQ,EAAE,aAAa,GAAG,GAAG,EAAE,iBAAiB,GAAG,GAAG,EAAE,GAAG,KAAK,EAAwB,EAAE,EAAE;IACrH,OAAO,CACL,oBAAC,kBAAY,CAAC,eAAe,IAAC,aAAa,EAAE,aAAa,EAAE,iBAAiB,EAAE,iBAAiB,KAAM,KAAK,IACxG,QAAQ,CACoB,CAChC,CAAA;AACH,CAAC,CAAA;AAGiB,0CAAe","sourcesContent":["\"use client\"\n\nimport { Tooltip as RadixTooltip } from \"radix-ui\"\nimport * as React from \"react\"\n\nimport { clx } from \"@/utils/clx\"\n\ninterface TooltipProps\n  extends Omit<RadixTooltip.TooltipContentProps, \"content\" | \"onClick\">,\n    Pick<\n      RadixTooltip.TooltipProps,\n      \"open\" | \"defaultOpen\" | \"onOpenChange\" | \"delayDuration\"\n    > {\n  content: React.ReactNode\n  onClick?: React.MouseEventHandler<HTMLButtonElement>\n  side?: \"bottom\" | \"left\" | \"top\" | \"right\"\n  maxWidth?: number\n}\n\n/**\n * This component is based on the [Radix UI Tooltip](https://www.radix-ui.com/primitives/docs/components/tooltip) primitive.\n *\n * @excludeExternal\n */\nconst Tooltip = ({\n  /**\n   * The element to trigger the tooltip.\n   * \n   * @keep\n   */\n  children,\n  /**\n   * The content to display in the tooltip.\n   */\n  content,\n  /**\n   * Whether the tooltip is currently open.\n   * \n   * @keep\n   */\n  open,\n  /**\n   * Whether the tooltip is open by default.\n   * \n   * @keep\n   */\n  defaultOpen,\n  /**\n   * A function that is called when the tooltip's open state changes.\n   * \n   * @keep\n   */\n  onOpenChange,\n  /**\n   * The time in milliseconds to delay the tooltip's appearance.\n   * \n   * @keep\n   */\n  delayDuration,\n  /**\n   * The maximum width of the tooltip.\n   */\n  maxWidth = 220,\n  className,\n  /**\n   * The side to position the tooltip.\n   * \n   * @defaultValue top\n   */\n  side,\n  /**\n   * The distance in pixels between the tooltip and its trigger.\n   * \n   * @keep\n   */\n  sideOffset = 8,\n  /**\n   * A function that is triggered when the tooltip is clicked.\n   */\n  onClick,\n  ...props\n}: TooltipProps) => {\n  return (\n      <RadixTooltip.Root\n        open={open}\n        defaultOpen={defaultOpen}\n        onOpenChange={onOpenChange}\n        delayDuration={delayDuration}\n      >\n        <RadixTooltip.Trigger onClick={onClick} asChild>\n          {children}\n        </RadixTooltip.Trigger>\n        <RadixTooltip.Portal>\n          <RadixTooltip.Content\n            side={side}\n            sideOffset={sideOffset}\n            align=\"center\"\n            className={clx(\n              \"txt-compact-xsmall text-ui-fg-subtle bg-ui-bg-base shadow-elevation-tooltip rounded-lg px-2.5 py-1\",\n              \"animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n              className\n            )}\n            {...props}\n            style={{ ...props.style, maxWidth }}\n          >\n            {content}\n          </RadixTooltip.Content>\n        </RadixTooltip.Portal>\n      </RadixTooltip.Root>\n  )\n}\n\ninterface TooltipProviderProps extends RadixTooltip.TooltipProviderProps {}\n\nconst TooltipProvider = ({ children, delayDuration = 100, skipDelayDuration = 300, ...props }: TooltipProviderProps) => {\n  return (\n    <RadixTooltip.TooltipProvider delayDuration={delayDuration} skipDelayDuration={skipDelayDuration} {...props}>\n      {children}\n    </RadixTooltip.TooltipProvider>\n  )\n}\n\n\nexport { Tooltip, TooltipProvider }\n"]}