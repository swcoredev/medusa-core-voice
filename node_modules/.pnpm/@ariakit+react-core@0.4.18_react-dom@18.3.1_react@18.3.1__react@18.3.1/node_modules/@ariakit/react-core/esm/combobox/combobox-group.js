"use client";
import {
  useCompositeGroup
} from "../__chunks/T4WMOWCD.js";
import "../__chunks/WXI7YN3P.js";
import "../__chunks/7HVFURXT.js";
import {
  useComboboxScopedContext
} from "../__chunks/OLVWQA7U.js";
import "../__chunks/Y67KZUMI.js";
import "../__chunks/T2AZQXQU.js";
import "../__chunks/ABN76PSX.js";
import "../__chunks/APTFW6PT.js";
import "../__chunks/5CPL3B7G.js";
import {
  createElement,
  createHook,
  forwardRef
} from "../__chunks/VOQWLFSQ.js";
import "../__chunks/5GGHRIN3.js";
import "../__chunks/SK3NAZA3.js";
import {
  __objRest,
  __spreadValues
} from "../__chunks/3YLGPPWQ.js";

// src/combobox/combobox-group.tsx
import { getPopupRole } from "@ariakit/core/utils/dom";
import { invariant } from "@ariakit/core/utils/misc";
var TagName = "div";
var useComboboxGroup = createHook(
  function useComboboxGroup2(_a) {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const context = useComboboxScopedContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "ComboboxRow must be wrapped in a ComboboxList or ComboboxPopover component"
    );
    const contentElement = store.useState("contentElement");
    const popupRole = getPopupRole(contentElement);
    if (popupRole === "grid") {
      props = __spreadValues({ role: "rowgroup" }, props);
    }
    props = useCompositeGroup(__spreadValues({ store }, props));
    return props;
  }
);
var ComboboxGroup = forwardRef(function ComboboxGroup2(props) {
  const htmlProps = useComboboxGroup(props);
  return createElement(TagName, htmlProps);
});
export {
  ComboboxGroup,
  useComboboxGroup
};
