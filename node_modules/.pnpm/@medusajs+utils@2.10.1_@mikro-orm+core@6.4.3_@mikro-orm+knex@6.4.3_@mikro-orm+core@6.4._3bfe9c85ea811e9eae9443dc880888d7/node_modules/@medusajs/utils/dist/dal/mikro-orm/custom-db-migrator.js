"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomDBMigrator = void 0;
const core_1 = require("@mikro-orm/core");
const migrations_1 = require("@mikro-orm/migrations");
const define_file_config_1 = require("../../common/define-file-config");
const dynamic_import_1 = require("../../common/dynamic-import");
class CustomDBMigrator extends migrations_1.Migrator {
    static register(orm) {
        orm.config.registerExtension("@mikro-orm/migrator", () => new CustomDBMigrator(orm.em));
    }
    resolve(params) {
        require(params.path);
        if ((0, define_file_config_1.isFileDisabled)(params.path)) {
            return {
                name: "Noop",
                up: () => { },
                down: () => { },
            };
        }
        const $this = this;
        const createMigrationHandler = async (method) => {
            const migration = await core_1.Utils.dynamicImport(params.path);
            const MigrationClass = Object.values(migration)[0];
            const instance = new MigrationClass($this.driver, $this.config);
            await $this.runner.run(instance, method);
        };
        return {
            name: $this.storage.getMigrationName(params.name),
            up: () => createMigrationHandler("up"),
            down: () => createMigrationHandler("down"),
        };
    }
    async getPendingMigrations() {
        const pending = await super.getPendingMigrations();
        // Filter out migrations that are disabled by file config
        return pending.filter(async (pendingFile) => {
            const migration = await (0, dynamic_import_1.dynamicImport)(pendingFile.path);
            if ((0, define_file_config_1.isFileSkipped)(migration)) {
                return false;
            }
            return true;
        });
    }
}
exports.CustomDBMigrator = CustomDBMigrator;
//# sourceMappingURL=custom-db-migrator.js.map